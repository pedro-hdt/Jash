/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 19 17:04:28 GMT 2020
 */

package automated.sg.edu.nus.comp.cs4218.impl.parser;


import org.junit.jupiter.api.Test;
import sg.edu.nus.comp.cs4218.impl.parser.LsArgsParser;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SuppressWarnings("PMD")
public class LsArgsParser_ESTest {

//  @Test
//  public void test0()  throws Throwable  {
//      LsArgsParser lsArgsParser0 = new LsArgsParser();
//      lsArgsParser0.nonFlagArgs = null;
//      List<String> list0 = lsArgsParser0.getDirectories();
//      assertNull(list0);
//  }
    
    @Test
    public void test1() throws Throwable {
        LsArgsParser lsArgsParser0 = new LsArgsParser();
        String[] stringArray0 = new String[6];
        stringArray0[0] = "illegal option -- ";
        stringArray0[1] = "illegal option -- ";
        stringArray0[2] = "illegal option -- ";
        stringArray0[3] = "illegal option -- ";
        stringArray0[4] = "illegal option -- ";
        stringArray0[5] = "illegal option -- ";
        lsArgsParser0.parse(stringArray0);
        List<String> list0 = lsArgsParser0.getDirectories();
        assertTrue(list0.contains("illegal option -- "));
    }

//  @Test
//  public void test2()  throws Throwable  {
//      LsArgsParser lsArgsParser0 = new LsArgsParser();
//      lsArgsParser0.flags = null;
//      // Undeclared exception!
//      try {
//        lsArgsParser0.isRecursive();
//        fail("Expecting exception: NullPointerException");
//
//      } catch(NullPointerException e) {
//      }
//  }
//
//  @Test
//  public void test3()  throws Throwable  {
//      LsArgsParser lsArgsParser0 = new LsArgsParser();
//      lsArgsParser0.flags = null;
//      // Undeclared exception!
//      try {
//        lsArgsParser0.isFoldersOnly();
//        fail("Expecting exception: NullPointerException");
//
//      } catch(NullPointerException e) {
//      }
//  }

//  @Test
//  public void test4()  throws Throwable  {
//      LsArgsParser lsArgsParser0 = new LsArgsParser();
//      Set<Character> set0 = lsArgsParser0.legalFlags;
//      lsArgsParser0.flags = set0;
//      lsArgsParser0.isRecursive();
//      assertTrue(lsArgsParser0.isFoldersOnly());
//  }
    
    @Test
    public void test5() throws Throwable {
        LsArgsParser lsArgsParser0 = new LsArgsParser();
        Boolean boolean0 = lsArgsParser0.isRecursive();
        assertFalse(lsArgsParser0.isFoldersOnly());
        assertFalse(boolean0);
    }

//  @Test
//  public void test6()  throws Throwable  {
//      LsArgsParser lsArgsParser0 = new LsArgsParser();
//      Set<Character> set0 = lsArgsParser0.legalFlags;
//      lsArgsParser0.flags = set0;
//      lsArgsParser0.isFoldersOnly();
//      assertTrue(lsArgsParser0.isRecursive());
//  }
    
    @Test
    public void test7() throws Throwable {
        LsArgsParser lsArgsParser0 = new LsArgsParser();
        Boolean boolean0 = lsArgsParser0.isFoldersOnly();
        assertFalse(lsArgsParser0.isRecursive());
        assertFalse(boolean0);
    }
    
    @Test
    public void test8() throws Throwable {
        LsArgsParser lsArgsParser0 = new LsArgsParser();
        lsArgsParser0.getDirectories();
        assertFalse(lsArgsParser0.isFoldersOnly());
        assertFalse(lsArgsParser0.isRecursive());
    }
}
